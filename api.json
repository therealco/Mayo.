{
    "name": "Gemini API",
    "version": "1.0.0",
    "description": "A simple API for managing users with CRUD operations",
    "scripts": {
      "start": "ts-node-dev src/server.ts"
    },
    "dependencies": {
      "express": "^4.17.1"
    },
    "devDependencies": {
      "typescript": "^4.1.3",
      "@types/node": "^14.14.31",
      "@types/express": "^4.17.11",
      "ts-node-dev": "^1.1.1"
    },
    "directories": {
      "lib": "src"
    },
    "files": [
      "src"
    ],
    "main": "src/server.ts",
    "engines": {
      "node": ">=14.0.0"
    },
    "keywords": [
      "api",
      "typescript",
      "express",
      "users",
      "crud"
    ],
    "author": "Your Name",
    "license": "MIT",
    "tsconfig": {
      "compilerOptions": {
        "target": "ES6",
        "module": "commonjs",
        "strict": true,
        "esModuleInterop": true,
        "skipLibCheck": true
      }
    },
    "src": {
      "models": {
        "user.ts": {
          "content": "export interface User {\n    id: number;\n    name: string;\n    email: string;\n}\n\nexport let users: User[] = [];\n"
        }
      },
      "controllers": {
        "userController.ts": {
          "content": "import { Request, Response } from 'express';\nimport { User, users } from '../models/user';\n\nlet userIdCounter = 1;\n\nexport const getUsers = (req: Request, res: Response) => {\n    res.json(users);\n};\n\nexport const getUserById = (req: Request, res: Response) => {\n    const user = users.find(u => u.id === parseInt(req.params.id));\n    if (user) {\n        res.json(user);\n    } else {\n        res.status(404).json({ message: 'User not found' });\n    }\n};\n\nexport const createUser = (req: Request, res: Response) => {\n    const newUser: User = {\n        id: userIdCounter++,\n        name: req.body.name,\n        email: req.body.email\n    };\n    users.push(newUser);\n    res.status(201).json(newUser);\n};\n\nexport const updateUser = (req: Request, res: Response) => {\n    const user = users.find(u => u.id === parseInt(req.params.id));\n    if (user) {\n        user.name = req.body.name;\n        user.email = req.body.email;\n        res.json(user);\n    } else {\n        res.status(404).json({ message: 'User not found' });\n    }\n};\n\nexport const deleteUser = (req: Request, res: Response) => {\n    const index = users.findIndex(u => u.id === parseInt(req.params.id));\n    if (index !== -1) {\n        users.splice(index, 1);\n        res.status(204).send();\n    } else {\n        res.status(404).json({ message: 'User not found' });\n    }\n};\n"
        }
      },
      "routes": {
        "userRoutes.ts": {
          "content": "import { Router } from 'express';\nimport { getUsers, getUserById, createUser, updateUser, deleteUser } from '../controllers/userController';\n\nconst router = Router();\n\nrouter.get('/users', getUsers);\nrouter.get('/users/:id', getUserById);\nrouter.post('/users', createUser);\nrouter.put('/users/:id', updateUser);\nrouter.delete('/users/:id', deleteUser);\n\nexport default router;\n"
        }
      },
      "app.ts": {
        "content": "import express from 'express';\nimport userRoutes from './routes/userRoutes';\n\nconst app = express();\n\napp.use(express.json());\napp.use('/api', userRoutes);\n\nexport default app;\n"
      },
      "server.ts": {
        "content": "import app from './app';\n\nconst PORT = process.env.PORT || 3000;\n\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});\n"
      }
    }
  }